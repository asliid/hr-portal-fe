{"ast":null,"code":"import axios from 'axios';\nconst axiosInstance = axios.create({\n  baseURL: 'http://localhost:8080/',\n  //Her api de aynı olduğu için url in ilk başını buraya yazabiliriz\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n//İstek gönderilirken yapılacak işlemler\naxiosInstance.interceptors.request.use(function (config) {\n  // İstek gönderilmeden önce yapılacak işlemler\n  console.log('sending request:', config);\n  return config;\n}, function (error) {\n  // İstek hatası durumunda yapılacak işlemler\n  console.error('request error:', error);\n  return Promise.reject(error);\n});\n\n//İstek geri döndüğünde yapılacak işlemler\naxiosInstance.interceptors.response.use(function (response) {\n  // Yanıt başarılı olduğunda yapılacak işlemler\n  console.log('response:', response.data);\n  return response;\n}, function (error) {\n  // Yanıtta hata olduğunda yapılacak işlemler\n  console.error('response error:', error);\n\n  // Örneğin, 401 (Unauthorized) hatası durumunda oturumun süresinin dolmuş olabileceğini varsayalım.\n  if (error.response.status === 401) {\n    // Oturumu yeniden yönlendirme veya kullanıcıyı oturum açma sayfasına yönlendirme gibi işlemler yapılabilir.\n    console.log('Oturum süresi dolmuş. Yeniden yönlendiriliyor...');\n    // Örnek olarak, kullanıcıyı oturum açma sayfasına yönlendirme:\n  }\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","axiosInstance","create","baseURL","headers","interceptors","request","use","config","console","log","error","Promise","reject","response","data","status"],"sources":["/Users/aslidongez/Desktop/staj/ik-prj/src/core/axiosInstance.js"],"sourcesContent":["import axios from 'axios';\n\nconst axiosInstance = axios.create({\n  baseURL: 'http://localhost:8080/',  //Her api de aynı olduğu için url in ilk başını buraya yazabiliriz\n  headers: {\n    'Content-Type': 'application/json',\n  }\n});\n\n//İstek gönderilirken yapılacak işlemler\naxiosInstance.interceptors.request.use(\n  function (config) {\n    // İstek gönderilmeden önce yapılacak işlemler\n    console.log('sending request:', config);\n  \n    return config;\n  }, \n  function (error) {\n    // İstek hatası durumunda yapılacak işlemler\n    console.error('request error:', error);\n    return Promise.reject(error);\n  }\n);\n\n\n//İstek geri döndüğünde yapılacak işlemler\naxiosInstance.interceptors.response.use(\n  function (response) {\n    // Yanıt başarılı olduğunda yapılacak işlemler\n    console.log('response:', response.data);\n    return response;\n  },\n  function (error) {\n    // Yanıtta hata olduğunda yapılacak işlemler\n    console.error('response error:', error);\n    \n    // Örneğin, 401 (Unauthorized) hatası durumunda oturumun süresinin dolmuş olabileceğini varsayalım.\n    if (error.response.status === 401) {\n      // Oturumu yeniden yönlendirme veya kullanıcıyı oturum açma sayfasına yönlendirme gibi işlemler yapılabilir.\n      console.log('Oturum süresi dolmuş. Yeniden yönlendiriliyor...');\n      // Örnek olarak, kullanıcıyı oturum açma sayfasına yönlendirme:\n    }\n    return Promise.reject(error);\n  }\n);\nexport default axiosInstance;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAM,CAAC;EACjCC,OAAO,EAAE,wBAAwB;EAAG;EACpCC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,aAAa,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACpC,UAAUC,MAAM,EAAE;EAChB;EACAC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,MAAM,CAAC;EAEvC,OAAOA,MAAM;AACf,CAAC,EACD,UAAUG,KAAK,EAAE;EACf;EACAF,OAAO,CAACE,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;EACtC,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAGD;AACAV,aAAa,CAACI,YAAY,CAACS,QAAQ,CAACP,GAAG,CACrC,UAAUO,QAAQ,EAAE;EAClB;EACAL,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEI,QAAQ,CAACC,IAAI,CAAC;EACvC,OAAOD,QAAQ;AACjB,CAAC,EACD,UAAUH,KAAK,EAAE;EACf;EACAF,OAAO,CAACE,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;;EAEvC;EACA,IAAIA,KAAK,CAACG,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;IACjC;IACAP,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC;IAC/D;EACF;EACA,OAAOE,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AACD,eAAeV,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}